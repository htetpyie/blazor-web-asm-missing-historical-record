@page "/read-book/{BookId}/{BookCode}"
@page "/read-book/{BookId}/{BookCode}/{PageNo:int}"
@inject BookContentService BookContentService;
@inject BookmarkService BookmarkService;
@implements IAsyncDisposable;

@if (Response is not null &&
  Response.ContentCount > 0 &&
  Response?.BookName is not null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="6">
                <MudToolBar>
                    @{
                        string totalPage = Response.ContentCount > 1
                        ? $"{Response.ContentCount} pages"
                        : $"{Response.ContentCount} page";
                    }
                    <MudTooltip Text="@totalPage" Placement="Placement.Bottom" Arrow="true">
                        <span class="me-2" style="font-size: 1rem;">@Response.BookName</span>
                    </MudTooltip>
                    @* <span>Total Pages: ( @TotalBookPage )</span> *@
                    <MudSpacer />

                    <MudTooltip Text="Go To Page" Placement="Placement.Bottom" Arrow="true">
                        <MudPaper style="width: 85px; margin:0 auto !important; "
                              Elevation="0">
                            <MudNumericField Style="height: 30px; margin: 0 !important;"
                                         HideSpinButtons="true"
                                         @bind-Value="SearchPageNo"
                                         Variant="Variant.Outlined"
                                         Min="1"
                                         Max="Response.ContentCount"
                                         Adornment="Adornment.End"
                                         AdornmentIcon="@Icons.Material.Filled.Search"
                                         TextChanged="(e) => { SearchPageNo = Convert.ToInt32(e); }"
                                         AdornmentColor="Color.Primary"
                                         OnAdornmentClick="() => GoToPage()"
                                         IconSize="Size.Small" />
                        </MudPaper>
                    </MudTooltip>

                    <MudTooltip Text="Go To Beginning" Placement="Placement.Bottom" Arrow="true">
                        <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft"
                                   Disabled="(PageNo - 1 <= 0)"
                                   OnClick="() => ClickOnPage(1)"
                                   Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                   Class="me-2 ms-4" />
                    </MudTooltip>

                    <MudTooltip Text="Go To End" Placement="Placement.Bottom" Arrow="true">
                        <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight"
                                   Disabled="(PageNo >= Response.ContentCount - 1)"
                                   OnClick="() => ClickOnPage(Response.ContentCount)"
                                   Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                   Class="me-2" />
                    </MudTooltip>

                    <MudTooltip Text="@(IsBookMark ? "Remove from Bookmark" : "Add to Bookmark")"
                            Placement="Placement.Bottom" Arrow="true">
                        <MudToggleIconButton Toggled="IsBookMark"
                                         Icon="@Icons.Material.Filled.BookmarkBorder"
                                         Color="@Color.Primary" Title="Off"
                                         ToggledIcon="@Icons.Material.Filled.Bookmark"
                                         ToggledColor="@Color.Primary"
                                         ToggledChanged="OnChangeBookMark"
                                         ToggledTitle="On"
                                         Class="me-2" />
                    </MudTooltip>

                    <MudTooltip Text="Previous Page" Placement="Placement.Bottom" Arrow="true">
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowLeft"
                                   Disabled="(PageNo - 1 == 0)"
                                   OnClick="() => ClickOnPage(PageNo - 1)"
                                   Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                   Class="me-2" />
                    </MudTooltip>

                    <MudTooltip Text="Next Page" Placement="Placement.Bottom" Arrow="true">
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowRight"
                                   Disabled="(PageNo >= Response.ContentCount - 1)"
                                   OnClick="() => ClickOnPage(PageNo + 2)"
                                   Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                   Class="me-4" />
                    </MudTooltip>

                    <MudTooltip Text="Full Screen" Placement="Placement.Bottom" Arrow="true">
                        <MudIconButton Icon="@Icons.Material.Filled.Fullscreen"
                                   OnClick="ClickFullScreen"
                                   Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />
                    </MudTooltip>

                </MudToolBar>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@if (Response is not null)
{
    <MudGrid id="book-pages">
        @{
            var item = Response.BookContents.Max(x => x.BookContentText);
        }

        @foreach (var t in Response.BookContents)
        {
            string content = t.BookContentText;
            if (content.Length < item?.Length)
            {
                content = content + "".PadLeft(item.Length - content.Length, ' ');
            }

            <MudItem xs="12" md="6" Style="padding: 12px 4px;">

                @if (!t.BookContentPageNo.IsEven())
                {
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft"
                       Disabled="(PageNo - 1 <= 0)"
                       OnClick="() => ClickOnPage(PageNo - 1)"
                       Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium"
                       Style="position:absolute !important; top:50%; left:-5px;"
                                   Id="left-btn"
                       Class="me-2" />
                }
                <MudPaper Elevation="4"
                  MinHeight="100vh"
                  Style="line-height: 24px; font-size:1rem;"
                  Class="@(@"d-flex pl-10 pr-10 mud-width-full py-8")">
                    <div style="position: relative;">
                        <span style="position: absolute; top: -30px; right: 50%;">@t.BookContentPageNo.ToDigitMyanmar()</span>
                        @(
                            (MarkupString)content
                            )
                    </div>
                </MudPaper>

                @if (t.BookContentPageNo.IsEven())
                {
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronRight"
                       Disabled="(PageNo >= Response.ContentCount - 1)"
                       OnClick="() => ClickOnPage(PageNo + 2)"
                       Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small"
                       Class="ms-2"
                                   Id="right-btn"
                       Style="position:absolute !important; right:-5px; top:50%;" />
                }

            </MudItem>

        }
    </MudGrid>
}

@code {

    [Parameter]
    public string? BookId { get; set; }

    private string? previousBookId { get; set; }
    private int previousPageNo { get; set; }

    [Parameter]
    public string? BookCode { get; set; }

    [Parameter]
    public int PageNo { get; set; } = 1;

    private BookContentResponseModel? Response { get; set; }
    private bool IsBookMark { get; set; }
    private int SearchPageNo { get; set; }

    private Lazy<IJSObjectReference> JSModule = new();

    protected override async Task OnParametersSetAsync()
    {
        if (BookId.IsNullOrWhiteSpace() ||
            (BookId == previousBookId &&
             PageNo == previousPageNo)
            ) return;

        previousBookId = BookId;
        previousPageNo = PageNo;

        LoadingService.EnableLoading();
        Response = await BookContentService.GetBookPageContents(BookId, PageNo);
        LoadingService.DisableLoading();
        IsBookMark = Response.IsBookMark;
        PageNo = Response.LeftPageNo;
        SearchPageNo = PageNo;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JSModule = new(await JS
                .InvokeAsync<IJSObjectReference>(
                    "import", "./js/book.js"));
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (JSModule.IsValueCreated)
        {
            await JSModule.Value.DisposeAsync();
        }
    }

    private async Task ClickFullScreen()
    {
        await JSModule.Value.InvokeVoidAsync("openFullscreen");
    }

    private async Task ClickOnPage(int pageNo)
    {
        LoadingService.EnableLoading();
        Response = await BookContentService.GetBookPageContents(BookId, pageNo);
        LoadingService.DisableLoading();

        IsBookMark = Response.IsBookMark;
        PageNo = Response.LeftPageNo;
        SearchPageNo = PageNo;
    }

    private async Task GoToPage()
    {
        await ClickOnPage(SearchPageNo);
    }

    private async Task OnChangeBookMark()
    {
        bool isValid = Guid.TryParse(BookId, out Guid BookIdGuid);
        if (!isValid) return;

        var bookmark = new BookmarkDataModel
            {
                BookCode = BookCode,
                BookId = BookIdGuid,
                PageNo = PageNo,
                CreatedDate = DateTime.Now,
            };

        if (IsBookMark)
        {
            await BookmarkService.RemoveBookmark(bookmark);
        }
        else
        {
            await BookmarkService.SaveBookmark(bookmark);
        }
        IsBookMark = !IsBookMark;
    }

}