@inject HomeService HomeService
@implements IDisposable

<MudTabs Elevation="0" class="my-3" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Latest">
        <div class="flex" style="justify-content: space-between;height: 250px;">
            @if (BookListResponse is not null &&
            BookListResponse.LatestBookList is not null)
            {
                @foreach (var item in BookListResponse.LatestBookList)
                {
                    string bookList = $"/read-book/{item.BookId}/{item.BookCode}";
                    bool isWished = IsWishedBook(item.BookId, item.BookCode);
                    <div style="cursor: pointer; position: relative;" @onclick="() => { _nav.NavigateTo(bookList); }">
                        <MudTooltip Text="@(isWished ? " Remove from Wish List" : "Add to Wish List" )"
                            Placement="Placement.Right"
                            Arrow="true">
                            <MudToggleIconButton Toggled="isWished"
                                         Icon="@Icons.Material.Filled.FavoriteBorder"
                                         Color="@Color.Secondary"
                                         ToggledIcon="@Icons.Material.Filled.Favorite"
                                         ToggledColor="@Color.Secondary"
                                         ToggledChanged="() => OnChangeWishList(item.BookId, item.BookCode, isWished)"
                                         Class="me-2"
                                         Style="position:absolute; right: -10%;" />
                        </MudTooltip>
                        <img src="@item.BookCover" style="width:150px;height: 200px;" alt="Book" class="rounded-lg" />
                        <p style="text-align:center; margin-top:1rem;width: 150px;">@item.BookTitle</p>
                    </div>
                }
                @if (BookListResponse.TotalBookCount > 4)
                {
                    <div>
                        <div style="text-align:center;line-height:200px; width:150px;">
                            <MudLink Color="Color.Secondary"
                             Underline="Underline.None"
                             Href="/book-list">
                                See all
                            </MudLink>
                        </div>
                    </div>
                }
            }
            else
            {
                <div style="margin:auto;">
                    <div style="text-align:center; margin-top:1rem;">No data available.</div>
                </div>
            }

        </div>
    </MudTabPanel>
    <MudTabPanel Text="Popular">
        <div class="flex" style="justify-content: space-between;align-items: center; height: 250px;">
            <div style="margin:auto;">
                <div style="text-align:center; margin-top:1rem;">No data available.</div>
            </div>
        </div>
    </MudTabPanel>
</MudTabs>

@code
{
    private BookListResponseModel BookListResponse { get; set; }

    protected async override Task OnInitializedAsync()
    {
        LoadingService.EnableLoading();
        BookListResponse = await HomeService.GetLatestBookList();
        LoadingService.DisableLoading();
    }

    private bool IsWishedBook(Guid bookId, string bookCode)
    {
        bool isWished = false;
        try
        {
            if (WishedBookState is not null && WishedBookState.WishBookListResponse is not null)
            {
                isWished = WishedBookState
                    .WishBookListResponse
                    .WishedBookList
                    .Any(x => x.BookId == bookId && x.BookCode == bookCode);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        return isWished;
    }

    void WishBookStateHasChanged(object sender, EventArgs e) => StateHasChanged();


    private async Task OnChangeWishList(Guid bookId, string bookCode, bool isWishedBook)
    {
        var data = new WishedBookDataModel
            {
                BookId = bookId,
                BookCode = bookCode,
            };

        LoadingService.EnableLoading();
        if (isWishedBook)
        {
            await WishedBookService.RemoveBookmark(data);
        }
        else
        {
            await WishedBookService.SaveWishBook(data);
        }

        WishedBookState.WishBookListResponse = await WishedBookService.GetWishBookList();
        LoadingService.DisableLoading();
    }

    void IDisposable.Dispose()
    {
        WishedBookState.OnChange -= WishBookStateHasChanged;
    }
}