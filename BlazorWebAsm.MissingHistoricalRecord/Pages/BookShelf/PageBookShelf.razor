@page "/book-list"
@page "/book_shelf"
@inject BookShelfService BookShelfService;

@if (BookShelf is not null && BookShelf.BookList.Count < 1)
{
    <div class="bookshelf">
        <div class="book-grid">
            Nothing to show.
        </div>
        <div class="shelf-shadows"></div>
        <div class="shelf"></div>
    </div>
}
else if (BookShelf is not null && BookShelf.BookList.Count <= 4)
{
    <div class="bookshelf">
        <div class="book-grid">
            <ul>
                @foreach (var item in BookShelf.BookList)
                {
                    <li>
                        <img @onclick="() => ToDetail(item)" src="@item.BookCover"/>
                    </li>
                }
            </ul>
        </div>
        <div class="shelf-shadows"></div>
        <div class="shelf"></div>
    </div>
}
else if (BookShelf is not null && BookShelf.BookList.Count > 4)
{
    @for (int outer = 0; outer < 2; outer++)
    {
        <div class="bookshelf">
            <div class="book-grid">
                <ul>
                    @for (int inner = 1; inner <= 4; inner++)
                    {
                        @if (BookShelf.BookList.Count != _counter)
                        {
                            var item = BookShelf.BookList.Count != _counter ?
                                BookShelf.BookList[_counter]
                                : BookShelf.BookList[BookShelf.BookList.Count - 1];
                            <li>
                                <img @onclick="() => ToDetail(item)" src="@item.BookCover"/>
                            </li>
                            _counter++;
                        }
                    }
                </ul>
            </div>
            <div class="shelf-shadows"></div>
            <div class="shelf"></div>
        </div>
    }
    _counter = 0;
}
@if (BookShelf is not null)
{
    <div class="text-center" style="text-align: center;margin-top: -2.5rem;">
        <MudPagination SelectedChanged="PageChanged" ShowFirstButton="true" ShowLastButton="true"
                       Count="@(BookShelf.TotalPage)"
                       Class="mt-0 pt-0"/>
    </div>
}


@code {
    private BookShelfResponseModel? BookShelf { get; set; }
    private int _counter = 0;

    protected override async Task OnInitializedAsync()
    {
        BookShelf = await BookShelfService.GetBookShelf();
    }

    async Task PageChanged(int pageNo = 1)
    {
        int pageSize = 8;
        _counter = 0;
        BookShelf = await BookShelfService.GetBookShelf(pageNo, pageSize);
    }

    void ToDetail(BookViewModel model)
    {
    // _counter = _bookShelfLst.BookList.Count;
        Console.WriteLine(_counter);
        var item = model;
        _nav.NavigateTo($"/read-book/{item.BookId}/{item.BookCode}");
    }

}