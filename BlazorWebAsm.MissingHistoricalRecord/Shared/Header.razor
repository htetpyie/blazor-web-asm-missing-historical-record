<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>

<MudAppBar Color="Color.Transparent" Fixed="true" Elevation="0" Class="docs-appbar-filter">
    <MudAppBar Color="Color.Transparent" Fixed="true" Elevation="0">
        <MudSpacer/>
        <MudAutocomplete style="width: 300px;"
                         T="SearchBookViewModel"
                         @bind-Value="searchBook"
                         ToStringFunc="@bookTitle"
                         Label="Search"
                         SearchFunc="@SearchBook"
                         Variant="Variant.Outlined"
                         Adornment="Adornment.End"
                         AdornmentIcon="@Icons.Material.Filled.Search"
                         AdornmentColor="Color.Secondary"
                         Margin="Margin.Dense"
                         Clearable="true"
                         OnClearButtonClick="() => { searchBook = new(); }"
                         OnAdornmentClick="GoToBook"/>

        <MudTooltip Text="@(_isDarkMode ? "Switch to white theme" : "Switch to dark theme")"
                    Placement="Placement.Bottom" Arrow="true">
            <MudToggleIconButton Toggled="_isDarkMode"
                                 Icon="@Icons.Material.Filled.DarkMode"
                                 Color="@Color.Primary" Title="Off"
                                 ToggledIcon="@Icons.Material.Filled.LightMode"
                                 ToggledChanged="OnChangeMode"
                                 ToggledTitle="On"
                                 Class="me-4"/>
        </MudTooltip>
    </MudAppBar>
</MudAppBar>

@code
{
    private SearchBookViewModel? searchBook { get; set; }
    private IEnumerable<SearchBookViewModel>? BookList { get; set; }

    private MudTheme _theme = new();
    public bool _isDarkMode = true;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            BookList = await HomeService.GetAllBook();
        }
    }

    private async Task<IEnumerable<SearchBookViewModel>?> SearchBook(string value)
    {
        if (value.IsNullOrEmpty())
        {
            return BookList;
        }

        return BookList.Where(x => x
            .BookTitle
            .Contains(
                value,
                StringComparison.InvariantCultureIgnoreCase)
            );
    }

    private void GoToBook()
    {
        if (!IsSearchEmpty())
            _nav.NavigateTo($"/read-book/{searchBook.BookId}/{searchBook.BookCode}");
    }

    private bool IsSearchEmpty()
    {
        string defaultGuid = "00000000-0000-0000-0000-000000000000";

        return (searchBook is null ||
                searchBook.BookCode.IsNullOrWhiteSpace() ||
                searchBook.BookId == new Guid(defaultGuid));
    }

    private void OnChangeMode()
    {
        _isDarkMode = !_isDarkMode;
    }

    Func<SearchBookViewModel, string> bookTitle = b => b?.BookTitle;
}